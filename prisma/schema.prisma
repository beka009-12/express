generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Пользователь
//
model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String?
  avatar    String?
  phone     String?   // <- обязательно с ?
  role      UserRole   @default(USER)
  
  cart      Cart[]
  stores    Store[]
  favorites Favorite[]  
  orders    Order[]
  reviews   Review[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

//
// Магазин
//
model Store {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  logo        String?
  address     String?
  region      String?

  ownerId     Int
  owner       User      @relation(fields: [ownerId], references: [id])

  products    Product[]
  createdAt   DateTime  @default(now())
}

//
// Товар
//
model Product {
  id          Int        @id @default(autoincrement())
  shopId      Int
  store       Store      @relation(fields: [shopId], references: [id])

  category    String
  brand       String
  title       String           
  description String
  images      String[]
  sizes       String[]   // вместо Int[], тк бывают S, M, L, XL
  colors      String[]
  price       Float
  newPrice    Float?     // если меньше price → значит скидка
  stockCount  Int        @default(0) // количество на складе
  inStock     Boolean    @default(true)

  tags        String[]
  createdAt   DateTime   @default(now()) 
  carts       Cart[]
  favorites   Favorite[]  
  reviews     Review[]
  orderItems  OrderItem[]
}

//
// Корзина
//
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

//
// Избранное
//
model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int 
  productId Int   

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
}

//
// Заказы
//
model Order { 
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  products        OrderItem[]
  total           Float
  status          OrderStatus @default(PENDING)

  // Новые поля для доставки
  deliveryName    String      // имя получателя
  deliveryPhone   String      // телефон получателя
  deliveryAddress String      // адрес доставки

  createdAt       DateTime    @default(now())
}


model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

//
// Отзывы
//
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int      // 1-5
  comment   String?

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

//
// Роли пользователей
//
enum UserRole {
  ADMIN
  OWNER
  USER
}

//
// Статусы заказа
//
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}
